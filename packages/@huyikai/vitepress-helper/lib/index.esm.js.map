{"version":3,"file":"index.esm.js","sources":["../../src/pages.ts","../../src/nav.ts","../../src/sidebar.ts","../../src/init.ts"],"sourcesContent":["import type { InitParams } from './../types/init';\nimport fs from 'fs-extra';\nimport globby from 'globby';\nimport matter from 'gray-matter';\nimport { v4 as uuidv4 } from 'uuid';\n// 定义一个页面的接口 Define the interface of a page\ninterface Page {\n  frontMatter: FrontMatter; // 页面的前置元数据\n  link: string; // 页面的链接\n  content: string; // 页面的内容\n}\n\n// 定义页面的前置元数据的接口\ninterface FrontMatter {\n  page?: any; // 页面的类型\n  date?: any; // 页面的日期\n}\n\n// Compare Dates\nconst compareDate = (obj1: Page, obj2: Page) => {\n  return obj1.frontMatter.date < obj2.frontMatter.date ? 1 : -1; // 按照日期降序排序\n};\n\nexport default async (params: InitParams) => {\n  const { directory } = params;\n  // 使用globby查找所有的md文件\n  const paths = await globby([`${directory}/**/**.md`], {\n    ignore: ['node_modules', 'README.md', 'packages'] // 忽略的文件夹和文件\n  });\n  // 使用Promise.all并发读取所有md文件的内容\n  let pages: Page[] = await Promise.all(\n    paths.map(async (item: string) => {\n      const content = await fs.readFile(item, 'utf-8'); // 读取md文件的内容\n      // console.log(content);\n      const matterData = matter(content); // 解析md文件的内容\n      return {\n        frontMatter: matterData.data, // 获取md文件的前置元数据\n        link: item, // 获取md文件的链接\n        // 将md文件内容中的非字母数字字符替换为空格，并转换为小写\n        content: matterData.content\n          .replace(/[^a-zA-Z0-9._ ]+/g, '')\n          .toLowerCase(),\n        uuid: uuidv4()\n      };\n    })\n  );\n\n  // 过滤掉frontMatter中有page属性的Page\n  pages = pages.filter((item: Page) => !item.frontMatter.page);\n\n  // 根据日期排序\n  pages.sort(compareDate);\n  return pages; // 返回所有页面的数组\n};\n","import type { InitParams } from './../types/init';\n// import { treeToArray } from 'tree-conver';\n// import { tree2array } from '@axolo/tree-array';\ninterface NavParams extends InitParams {\n  pages: Array<{ link: string }>;\n}\n// 排序方法\n// const compare = (obj1: any, obj2: any) => {\n//   var val1 = obj1.link;\n//   var val2 = obj2.link;\n//   if (val1 < val2) {\n//     return -1;\n//   } else if (val1 > val2) {\n//     return 1;\n//   } else {\n//     return 0;\n//   }\n// };\n\nexport default (params: NavParams) => {\n  const { pages, directory } = params;\n  // console.log('pages', pages);\n  // 过滤出以root为根目录的所有内容\n  const pagesFiltered: Array<{}> = pages.filter((i) =>\n    i.link.includes(`${directory}/`)\n  );\n  // 构建导航栏\n  const buildNav = (pagesFiltered: any) => {\n    let list: Array<any> = [];\n    const pages = pagesFiltered.map((item: any) => ({\n      ...item,\n      link: item.link.split(`${directory}/`)[1],\n      level: item.link.split(`${directory}/`)[1].split('/').length - 1\n    }));\n    console.log(pages.filter((i: any) => i.level > 0));\n    const links = pages\n      .filter((i: any) => i.level > 0)\n      .map((i: any) => i.link.split('/').slice(0, -1));\n    console.log(links);\n    const generateTree = (links: string[][]) => {\n      const tree: any = {};\n      links.forEach((link) => {\n        let currentLevel = tree;\n        link.forEach((part) => {\n          if (!currentLevel[part]) {\n            currentLevel[part] = { text: part, children: {} };\n          }\n          currentLevel = currentLevel[part].children;\n        });\n      });\n\n      const convertToArray = (node: any) => {\n        return Object.values(node).map((value: any) => {\n          value.children = convertToArray(value.children);\n          return value;\n        });\n      };\n\n      return convertToArray(tree);\n    };\n    const tree = generateTree(links);\n    console.log(JSON.stringify(tree));\n    // console.log(treeToArray(tree));\n    // console.log(tree2array(tree));\n    // for (let a of pagesFiltered) {\n    //   let link = a.link.split(`${directory}/`)[1];\n    //   let urls = link.split('/');\n    //   for (let i = 0, len = urls.length; i < len; i++) {\n    //     let b = urls[i];\n    //     let obj = {\n    //       text: b.replace('.md', ''),\n    //       key: b,\n    //       parent: i > 0 ? urls[i - 1] : undefined,\n    //       link: `/${directory}/${urls.join('/')}`\n    //     };\n    //     list.push(obj);\n    //   }\n    // }\n\n    // list = list.sort(compare);\n    // 过滤出所有有父级的内容\n    // let childrenList = list.filter((i: any) => i.parent);\n    // 去重\n    // const uniqueFunc = (arr: any, uniId: any) => {\n    //   const res = new Map();\n    //   return arr.filter(\n    //     (item: any) => !res.has(item[uniId]) && res.set(item[uniId], 1)\n    //   );\n    // };\n    // childrenList = uniqueFunc(childrenList, 'key');\n    // // 过滤出根目录下的内容\n    // let rootList: any = list.filter((i: any) => !i.parent);\n    // rootList = uniqueFunc(rootList, 'key'); // 去重\n    // // 遍历根目录下的内容\n    // rootList.map((item: any) => {\n    //   parseList(item);\n    // });\n    // // 递归遍历所有内容，构建树形结构\n    // function parseList(parent: any): any {\n    //   let children = childrenList.filter((i: any) => i.parent === parent.key);\n    //   if (children.length > 0) {\n    //     delete parent.link;\n    //     for (const item of children) {\n    //       parseList(item);\n    //     }\n    //     if (!parent.hasOwnProperty('items')) {\n    //       parent.items = children;\n    //     }\n    //   }\n    // }\n    // return rootList;\n    return list;\n  };\n  return buildNav(pagesFiltered);\n};\n","import type { InitParams } from './../types/init';\ninterface childrenItemsType {\n  text: string;\n  key: string;\n  parentKey: string | undefined;\n  link?: string;\n  items: childrenItemsType;\n  collapsible: boolean | undefined;\n  collapsed: boolean | undefined | null;\n}\ninterface pagesType {\n  frontMatter: string;\n  regularPath: string;\n  relativePath: string;\n  link: string;\n  content: string;\n}\n// /**\n//  * @param pages\n//  * @param directory\n//  * @param collapsible\n//  * @returns {Array}\n//  */\nexport interface SidebarParams extends InitParams {\n  pages: Array<pagesType>;\n}\nexport default (params: SidebarParams) => {\n  const { pages, directory, collapsible } = params;\n  let rootNameList: Array<string> = [];\n  let childrenList: any = [];\n\n  for (let a of pages) {\n    // generate root dir name list\n    let rootName = a.link\n      .replace(`${directory}/`, '')\n      .split('/')\n      .filter((i: string, n: number) => i.indexOf('.md') < 0 && n < 2)\n      .join('/');\n    if (rootName.indexOf('/') >= 0) {\n      rootNameList.push(rootName);\n    }\n    let urls = a.link.replace(`${directory}/`, '').split('/');\n    for (let i = 0, len = urls.length; i < len; i++) {\n      let b = urls[i];\n      let obj = {\n        text: b.replace('.md', ''),\n        key: b,\n        parentKey: i > 0 ? urls[i - 1] : undefined,\n        link: `/${urls.join('/')}`\n      };\n      childrenList.push(obj);\n    }\n  }\n  rootNameList = rootNameList.filter((i: string) => !['', '/'].includes(i));\n  rootNameList.sort();\n  // compare\n  function compare(obj1: any, obj2: any) {\n    var val1 = obj1.text;\n    var val2 = obj2.text;\n    if (val1 < val2) {\n      return -1;\n    } else if (val1 > val2) {\n      return 1;\n    } else {\n      return 0;\n    }\n  }\n  childrenList = childrenList.sort(compare);\n  // 去重\n  function unique(arr: Array<any>, unikey = '') {\n    const res: any = new Map();\n    return arr.filter(\n      (item: any) =>\n        !res.has(unikey ? item[unikey] : item) &&\n        res.set(unikey ? item[unikey] : item, 1)\n    );\n  }\n  rootNameList = unique(rootNameList);\n  let sidebar: any = {};\n  for (let c of rootNameList) {\n    sidebar[c] = [\n      {\n        text: c\n          .split('/')\n          .filter((i: any) => i)\n          .splice(-1, 1)[0],\n        key: c\n          .split('/')\n          .filter((i: any) => i)\n          .splice(-1, 1)[0],\n        parentKey: undefined\n      }\n    ];\n  }\n  for (let t in sidebar) {\n    parseList(sidebar[t][0]);\n  }\n\n  function parseList(item: childrenItemsType) {\n    let children = childrenList.filter(\n      (i: childrenItemsType) => item.key === i.parentKey\n    );\n    children = unique(children, 'key');\n    if (children) {\n      for (let a of children) {\n        parseList(a);\n      }\n      !(item.hasOwnProperty('link') && item.key.indexOf('.md') >= 0) &&\n        delete item.link;\n      item.items = children;\n      item.collapsible = collapsible;\n      item.collapsed = null;\n    }\n  }\n  return sidebar;\n};\n","import type { InitParams } from './../types/init';\nimport handleFetchPages from './pages';\nimport nav from './nav';\nimport sidebar from './sidebar';\n\nexport default async (\n  params: InitParams = { directory: 'docs', collapsible: true }\n) => {\n  const pages: any = await handleFetchPages(params);\n  const commonParams = { pages, ...params };\n\n  return {\n    nav: nav(commonParams),\n    sidebar: sidebar(commonParams),\n    pages\n  };\n};\n"],"names":["compareDate","obj1","obj2","frontMatter","date","handleFetchPages","async","params","directory","paths","globby","ignore","pages","Promise","all","map","item","content","fs","readFile","matterData","matter","data","link","replace","toLowerCase","uuid","uuidv4","filter","page","sort","nav","pagesFiltered","split","level","length","console","log","i","links","slice","tree","forEach","currentLevel","part","text","children","convertToArray","node","Object","values","value","generateTree","JSON","stringify","buildNav","includes","sidebar","collapsible","rootNameList","childrenList","a","rootName","n","indexOf","join","push","urls","len","b","obj","key","parentKey","undefined","unique","arr","unikey","res","Map","has","set","val1","val2","c","splice","t","parseList","hasOwnProperty","items","collapsed","init","commonParams"],"mappings":"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"}