import{_ as e,p as a,n as o,O as c}from"./chunks/framework.ZbD7-4CG.js";const S=JSON.parse('{"title":"CMS","description":"","frontmatter":{},"headers":[],"relativePath":"jp/Guide/Basic/Features/CMS.md","filePath":"jp/Guide/Basic/Features/CMS.md","lastUpdated":1709888786000}'),s={name:"jp/Guide/Basic/Features/CMS.md"},i=c('<h1 id="cms" tabindex="-1">CMS <a class="header-anchor" href="#cms" aria-label="Permalink to &quot;CMS&quot;">​</a></h1><p>ローカル CMS を実行してコンテンツ管理を簡素化します</p><h2 id="使用法" tabindex="-1">使用法 <a class="header-anchor" href="#使用法" aria-label="Permalink to &quot;使用法&quot;">​</a></h2><p>プロジェクトをスキャフォールディングして作成する際に、CMS を追加するかどうかを尋ねられます。<code>yes</code>を選択し、初期化後に直接<code>npm run cms</code>を実行して使用します。</p><p>後で CMS 機能を補完するには、まず依存関係をインストールするために<code>npm install @huyikai/local-cms -D</code>を実行します。次に、<code>package.json</code>の<code>scripts</code>にスクリプトコマンドを追加します。<code>&quot;cms&quot;: &quot;node node_modules/@huyikai/local-cms/cms.js docs&quot;</code>として、<code>npm run cms</code>を実行します。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>スクリプトコマンドの<code>docs</code>は CMS の実行ディレクトリであり、VitePress の実行ディレクトリと一致する必要があります。ほとんどの場合、このディレクトリは<code>docs</code>を使用します。このディレクトリをカスタマイズして変更することもできますが、スクリプトコマンドと<code>config.js</code>の<code>VitePress-Helper</code>の初期パラメータを同期する必要があります。</p></div><h2 id="機能" tabindex="-1">機能 <a class="header-anchor" href="#機能" aria-label="Permalink to &quot;機能&quot;">​</a></h2><ul><li>Antdv に基づく UI。</li><li>スクリプトを介した実行。</li><li>ディレクトリとファイルの基本的な CRUD 操作。</li><li>Markdown ファイルのリアルタイムプレビューと保存。</li></ul><h2 id="プラン" tabindex="-1">プラン <a class="header-anchor" href="#プラン" aria-label="Permalink to &quot;プラン&quot;">​</a></h2><ul><li>Markdown エディタのユーザーエクスペリエンスを向上させる。</li><li>ファイルとディレクトリの移動、ドラッグアンドドロップ機能を含む。</li><li>ローカルファイルのインポートと一括処理。</li><li>リンクからのコンテンツのインポート。</li><li>バージョン管理。</li><li>静的リソース（画像）の管理。</li></ul><h2 id="cms-について" tabindex="-1">CMS について <a class="header-anchor" href="#cms-について" aria-label="Permalink to &quot;CMS について&quot;">​</a></h2><p>この<code>local CMS</code>の開発は、ナビゲーションバーやサイドバーなどのツールを使用しても、開発ツールでコンテンツとディレクトリを管理し、マークダウンエディタでコンテンツを編集するなど、まだいくつかのメンテナンスコストがあることがわかったためです。操作プロセスをさらに簡素化し、コンテンツの作成と管理に重点を置くことを目的としています。</p><p>VitePress は静的サイトジェネレーターであり、通常はコンテンツを編集してコードをコードリポジトリにプッシュし、コードリポジトリのページとワークフローを通じてサイトを自動的に公開します。また、サーバーに直接配置したり、コンテナを介して展開したりすることもできます。</p><p>多くの成熟した CMS システムがありますが、既存の CMS システムを使用する代わりにシンプルなローカル CMS を開発した理由は次のとおりです。</p><p>現在知られているほとんどの CMS システムは、コンテンツ管理と保存のためにサーバーとデータベースをペアにする必要があります。 この使用法はより成熟していますが、現在の使用シナリオでは重すぎて、追加の開発および使用コストがかかります。また、VitePress のユーザーエクスペリエンスから逸脱し、CMS が提供するインターフェースを通じて取得したコンテンツは SEO に適していません。 最も重要なのは、使用するためには追加の定期購読料が必要なことがよくあります。</p><p>また、Git ベースの CMS 管理システムもありますが、使用およびエクスペリエンスの問題もあります。もちろん、これはこれらの CMS システムの問題ではありません。ただし、使用シナリオが合致しないためです。</p><p>そのため、VitePress の使用シナリオでは、マークダウンエディタと同じくらい使いやすいように、概念と構成が少ないシンプルなローカル CMS が必要だと考えています。</p><p>VitePress-Helper の CMS は実際には独自に開発されたライブラリであり、VitePress をより柔軟にし、他の使用シナリオでも便利にするために、CMS が分離されています。</p>',18),t=[i];function l(d,r,p,n,u,h){return o(),a("div",null,t)}const _=e(s,[["render",l]]);export{S as __pageData,_ as default};
