import{_ as e,p as a,n as o,O as c}from"./chunks/framework.ZbD7-4CG.js";const S=JSON.parse('{"title":"CMS","description":"","frontmatter":{},"headers":[],"relativePath":"Guide/Basic/Features/CMS.md","filePath":"Guide/Basic/Features/CMS.md","lastUpdated":1709888786000}'),s={name:"Guide/Basic/Features/CMS.md"},i=c('<h1 id="cms" tabindex="-1">CMS <a class="header-anchor" href="#cms" aria-label="Permalink to &quot;CMS&quot;">​</a></h1><p>运行本地 CMS 以简化内容管理</p><h2 id="使用" tabindex="-1">使用 <a class="header-anchor" href="#使用" aria-label="Permalink to &quot;使用&quot;">​</a></h2><p>通过脚手架创建项目时,会询问是否需要添加 CMS，选择 <code>是</code> 在初始化完成后直接运行 <code>npm run cms</code> 即可使用。</p><p>后续补充 CMS 功能，需要先运行 <code>npm install @huyikai/local-cms -D</code> 安装依赖，然后在 <code>package.json</code> 的 <code>scripts</code> 中添加脚本命令 <code>&quot;cms&quot;: &quot;node node_modules/@huyikai/local-cms/cms.js docs&quot;</code> 再运行 <code>npm run cms</code> 即可。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>脚本命令中的 <code>docs</code> 为 CMS 的执行目录，需要与 VitePress 的执行目录一致，通常情况下这个目录会使用 <code>docs</code> ，可以自定义修改该目录，但是要注意需要同步修改脚本命令和 <code>config.js</code> 中 <code>VitePress-Helper</code> 的初始参数。</p></div><h2 id="功能" tabindex="-1">功能 <a class="header-anchor" href="#功能" aria-label="Permalink to &quot;功能&quot;">​</a></h2><ul><li>UI 基于 Antdv。</li><li>通过脚本运行。</li><li>对目录和文件实现基础的增删改查功能。</li><li>Markdown 文件的编辑，实时预览保存。</li></ul><h2 id="计划" tabindex="-1">计划 <a class="header-anchor" href="#计划" aria-label="Permalink to &quot;计划&quot;">​</a></h2><ul><li>Markdown 编辑器使用体验优化。</li><li>文件、目录移动以及拖拽移动。</li><li>本地文件导入、批处理。</li><li>链接内容导入。</li><li>版本控制。</li><li>静态资源（映像）管理。</li></ul><h2 id="关于-cms" tabindex="-1">关于 CMS <a class="header-anchor" href="#关于-cms" aria-label="Permalink to &quot;关于 CMS&quot;">​</a></h2><p>开发这个 <code>本地CMS</code>，是因为在使用过程中发现，即使有了导航栏和侧边栏的工具，但仍然存在一些维护成本，比如需要在开发工具中管理内容及目录，又要在 markdown 编辑器中编辑内容。想进一步简化这个过程的操作，更加专注于内容的创作和管理。</p><p>VitePress 是一个静态站点生成器，常见的使用方式是编辑内容然后将代码推送到代码仓库，通过代码仓库的 Pages 和工作流自动发布站点。也可以在服务器上直接放置构建后的代码文件或者通过容器部署。</p><p>CMS 系统有很多已经成熟的项目，之所以选择开发一个简单的本地 CMS ，而不是使用现有 CMS 系统的原因如下。</p><p>目前了解的大多数 CMS 系统需要服务器和数据库来搭配对内容管理和存储。 这种使用方式比较成熟，但对于当前的使用场景来说，体量过重了，增加额外的开发成本、使用成本。和 VitePress 的使用体验也有所割裂，通过 CMS 提供的接口获取内容对 SEO 也不够友好。 最主要的它们往往还需要额外付费订阅才能使用。</p><p>还有一种基于 Git 的 CMS 管理系统，相比较更适合，但也存在使用成本和体验的问题。当然这并不是这些 CMS 系统的问题，只是使用场景没有契合。</p><p>所以我认为在使用 VitePress 的场景下需要的是一个使用简单，没有太多概念和配置，甚至用起来像一个 markdown 编辑器的本地 CMS。</p><p>VitePress-Helper 中的 CMS 实际上是一个独立开发的库，让 VitePress 更加灵活的同时，也为了方便其他情况下使用，所以将 CMS 独立了出来。</p>',18),t=[i];function d(l,r,n,p,u,h){return o(),a("div",null,t)}const _=e(s,[["render",d]]);export{S as __pageData,_ as default};
